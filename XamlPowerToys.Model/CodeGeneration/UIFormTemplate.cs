// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlPowerToys.Model.CodeGeneration
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Windows;
    using System.Windows.Controls;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\vs2015\XAMLPowerToys2015\XamlPowerToys.Model\CodeGeneration\UIFormTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class UIFormTemplate : UIFormTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 9 "C:\Dev\vs2015\XAMLPowerToys2015\XamlPowerToys.Model\CodeGeneration\UIFormTemplate.tt"
 
	if (this.Model.WrapGeneratedCodeInBorder) {
		WriteLine(this.Model.BorderHelper.StartTag());
    }

	WriteLine(this.Model.RootControlStartTag);

	WriteLine(this.Model.FormHeader);

	var index = 0;
    foreach (var columnSet in this.Model.FormComponentModelCollection) {
		WriteLine(this.Model.MakeColumnRootControlStartTag(index));

		if (this.Model.ColumnRootObject == RootObject.TableView) {
			WriteLine(this.Model.TableRootHelper.StartTag());
        }

		Int32? currentRootRow = null;
		if (this.Model.ColumnRootObject == RootObject.Grid) {
			currentRootRow = 0;	
        }

		var lastTableSectionTitle = String.Empty;
	
		foreach (var formComponentModel in columnSet) {
				
			// skip items that will be rendered on same row with another control
			if (formComponentModel.RenderOnSharedRow) {
				continue;
			}

			if (this.Model.ColumnRootObject == RootObject.TableView) {
				// start a new table section
				if (lastTableSectionTitle != formComponentModel.TableSectionTitle) {
					// if not the first table section, write closing table section tag
					if (!String.IsNullOrWhiteSpace(lastTableSectionTitle)) {
						WriteLine(this.Model.TableSectionHelper.EndTag());
                    }
					
					WriteLine(this.Model.TableSectionHelper.StartTag(formComponentModel.TableSectionTitle));

					lastTableSectionTitle = formComponentModel.TableSectionTitle;
                }
            }

			// when requested write label above control
			if (this.Model.LabelPosition == LabelPosition.Top && formComponentModel.ShowLabel) {
				WriteLine(this.Model.LabelHelper.MakeTag(formComponentModel.LabelText, formComponentModel.LabelImageName, formComponentModel.LabelWidthText, null, currentRootRow));
				if (this.Model.ColumnRootObject == RootObject.Grid) {
					currentRootRow += 1;	
				}
			}

			// column root = stack layout && control layout is grid
			if (formComponentModel.ColumnRootObject == RootObject.StackLayout && formComponentModel.ControlLayoutRoot == RootObject.Grid) {
				var currentColumn = 0;
				var currentInnerGridColumn = 0;
				var componentColumns = new List<GridLength>();

				if (!formComponentModel.IncludeNextControlInRow || this.Model.LabelPosition == LabelPosition.Left) {
					componentColumns.Add(new GridLength(85));
                }
				if (formComponentModel.IncludeNextControlInRow && formComponentModel.CellWidthGridLength.HasValue) {
					componentColumns.Add(formComponentModel.CellWidthGridLength.Value);
                } else {
					componentColumns.Add(new GridLength(1, GridUnitType.Star));
                }
				
				componentColumns.AddRange(formComponentModel.SameRowFormComponentModelsColumns);

				WriteLine(this.Model.GridHelper.StartTag(componentColumns, null, currentColumn, currentRootRow));
				if (this.Model.ColumnRootObject == RootObject.Grid) {
					currentRootRow += 1;	
				}

				if (this.Model.LabelPosition == LabelPosition.Left && formComponentModel.ShowLabel) {
					WriteLine(this.Model.LabelHelper.MakeTag(formComponentModel.LabelText, formComponentModel.LabelImageName, formComponentModel.LabelWidthText, 0, 0));
					currentInnerGridColumn += 1;
				}
								
				WriteLine(formComponentModel.ControlFactory.MakeControl(currentInnerGridColumn));	
				currentInnerGridColumn += 1;

				foreach (var item in formComponentModel.SameRowFormComponentModels) {
					if (item.ShowLabel) {
						WriteLine(this.Model.LabelHelper.MakeTag(item.LabelText, item.LabelImageName, item.LabelWidthText, currentInnerGridColumn, null));
						currentInnerGridColumn += 1;
					}

					WriteLine(item.ControlFactory.MakeControl(currentInnerGridColumn));	
					currentInnerGridColumn += 1;
				}

				WriteLine(this.Model.GridHelper.EndTag());

			// column root = grid layout && control layout is grid
            } else if (formComponentModel.ColumnRootObject == RootObject.Grid && formComponentModel.ControlLayoutRoot == RootObject.Grid) {
				
				var currentColumn = 0;
				var currentInnerGridColumn = 0;
				var componentColumns = new List<GridLength>();

				if (!formComponentModel.IncludeNextControlInRow) {
					componentColumns.Add(new GridLength(85));
                }
				if (formComponentModel.IncludeNextControlInRow && formComponentModel.CellWidthGridLength.HasValue) {
					componentColumns.Add(formComponentModel.CellWidthGridLength.Value);
                } else {
					componentColumns.Add(new GridLength(1, GridUnitType.Star));
                }
				
				componentColumns.AddRange(formComponentModel.SameRowFormComponentModelsColumns);
				
				if (this.Model.LabelPosition == LabelPosition.Left && formComponentModel.ShowLabel && formComponentModel.IncludeNextControlInRow) {
					WriteLine(this.Model.LabelHelper.MakeTag(formComponentModel.LabelText, formComponentModel.LabelImageName, formComponentModel.LabelWidthText, 0, currentRootRow));
					currentColumn += 1;
				}

				WriteLine(this.Model.GridHelper.StartTag(componentColumns, null, currentColumn, currentRootRow));
				if (this.Model.ColumnRootObject == RootObject.Grid) {
					currentRootRow += 1;	
				}

				if (this.Model.LabelPosition == LabelPosition.Left && formComponentModel.ShowLabel && !formComponentModel.IncludeNextControlInRow) {
					WriteLine(this.Model.LabelHelper.MakeTag(formComponentModel.LabelText, formComponentModel.LabelImageName, formComponentModel.LabelWidthText, 0, 0));
					currentInnerGridColumn += 1;
				}
								
				WriteLine(formComponentModel.ControlFactory.MakeControl(currentInnerGridColumn));	
				currentInnerGridColumn += 1;

				foreach (var item in formComponentModel.SameRowFormComponentModels) {
					if (item.ShowLabel) {
						WriteLine(this.Model.LabelHelper.MakeTag(item.LabelText, item.LabelImageName, item.LabelWidthText, currentInnerGridColumn, null));
						currentInnerGridColumn += 1;
					}

					WriteLine(item.ControlFactory.MakeControl(currentInnerGridColumn));	
					currentInnerGridColumn += 1;
				}

				WriteLine(this.Model.GridHelper.EndTag());

			// column root = table view && control layout is grid
            } else if (formComponentModel.ColumnRootObject == RootObject.TableView && formComponentModel.ControlLayoutRoot == RootObject.Grid) {
				WriteLine(this.Model.ViewCellHelper.StartTag());
						
				var currentColumn = 0;
				var currentInnerGridColumn = 0;
				var componentColumns = new List<GridLength>();

				//if (!formComponentModel.IncludeNextControlInRow) {
				//	componentColumns.Add(new GridLength(85));
                //}

				componentColumns.Add(new GridLength(85));

				if (formComponentModel.IncludeNextControlInRow && formComponentModel.CellWidthGridLength.HasValue) {
					componentColumns.Add(formComponentModel.CellWidthGridLength.Value);
                } else {
					componentColumns.Add(new GridLength(1, GridUnitType.Star));
                }
				
				componentColumns.AddRange(formComponentModel.SameRowFormComponentModelsColumns);

				WriteLine(this.Model.GridHelper.StartTag(componentColumns, null, currentColumn, currentRootRow));
				if (this.Model.ColumnRootObject == RootObject.Grid) {
					currentRootRow += 1;	
				}

				if (this.Model.LabelPosition == LabelPosition.Left && formComponentModel.ShowLabel) {
					WriteLine(this.Model.LabelHelper.MakeTag(formComponentModel.LabelText, formComponentModel.LabelImageName, formComponentModel.LabelWidthText, 0, 0));
					currentInnerGridColumn += 1;
				}
								
				WriteLine(formComponentModel.ControlFactory.MakeControl(currentInnerGridColumn));	
				currentInnerGridColumn += 1;

				foreach (var item in formComponentModel.SameRowFormComponentModels) {
					if (item.ShowLabel) {
						WriteLine(this.Model.LabelHelper.MakeTag(item.LabelText, item.LabelImageName, item.LabelWidthText, currentInnerGridColumn, null));
						currentInnerGridColumn += 1;
					}

					WriteLine(item.ControlFactory.MakeControl(currentInnerGridColumn));	
					currentInnerGridColumn += 1;
				}

				WriteLine(this.Model.GridHelper.EndTag());

				WriteLine(this.Model.ViewCellHelper.EndTag());
											
			// render control with out row wrapping control, 
			} else {
				if (this.Model.LabelPosition == LabelPosition.Left && formComponentModel.ShowLabel) {
					WriteLine(this.Model.LabelHelper.MakeTag(formComponentModel.LabelText, String.Empty, formComponentModel.LabelWidthText, null, currentRootRow));
					WriteLine(formComponentModel.ControlFactory.MakeControl(1, currentRootRow));	
				} else {
					WriteLine(formComponentModel.ControlFactory.MakeControl(null, currentRootRow));	
                }
				
				if (this.Model.ColumnRootObject == RootObject.Grid) {
					currentRootRow += 1;	
				}
			}
				
			// when requested write label below control
			if (this.Model.LabelPosition == LabelPosition.Bottom && formComponentModel.ShowLabel) {
				WriteLine(this.Model.LabelHelper.MakeTag(formComponentModel.LabelText, String.Empty, formComponentModel.LabelWidthText, null, currentRootRow));
				if (this.Model.ColumnRootObject == RootObject.Grid) {
					currentRootRow += 1;	
				}
			}	
        }

		// close last table section and the table root
		if (this.Model.ColumnRootObject == RootObject.TableView) {
			WriteLine(this.Model.TableSectionHelper.EndTag());

			WriteLine(this.Model.TableRootHelper.EndTag());
        }

		WriteLine(this.Model.ColumnRootControlEndTag);
		index += 1;
    }

	WriteLine(this.Model.RootControlEndTag);

	if (this.Model.WrapGeneratedCodeInBorder) {
		WriteLine(this.Model.BorderHelper.EndTag());
    }
 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class UIFormTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
